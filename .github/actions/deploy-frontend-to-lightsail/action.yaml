name: Deploy Frontend to AWS Lightsail
description: Deploy frontend application to AWS Lightsail

inputs:
  aws-access-key-id:
    description: AWS Access Key ID
    required: true
  aws-region:
    description: AWS Region
    required: true
  aws-secret-access-key:
    description: AWS Access Key Secret
    required: true
  app-url:
    description: Frontend application URL
    required: true
  api-url:
    description: Backend API URL
    required: true
  gh-app-id:
    description: GitHub App ID
    required: true
  gh-private-key:
    description: GitHub Private Key
    required: true
  gh-installation-id:
    description: GitHub Installation ID
    required: true

runs:
  using: composite
  steps:
  - name: Mask sensitive inputs
    shell: bash
    run: |
      echo "::add-mask::${{ inputs.aws-access-key-id }}"
      echo "::add-mask::${{ inputs.aws-secret-access-key }}"
      echo "::add-mask::${{ inputs.app-url }}"
      echo "::add-mask::${{ inputs.api-url }}"
      echo "::add-mask::${{ inputs.gh-app-id }}"
      echo "::add-mask::${{ inputs.gh-private-key }}"
      echo "::add-mask::${{ inputs.gh-installation-id }}"

  - name: Set up AWS CLI
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  - name: Install Lightsail plugin
    shell: bash
    run: |
      curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
      chmod +x /usr/local/bin/lightsailctl

  - name: Build and push Docker image
    env:
      LIGHTSAIL_SERVICE_NAME: jaja-frontend
      CONTAINER_NAME: frontend
    shell: bash
    run: |
      # Build Docker image with build-time environment variables
      docker build \
        --build-arg NEXT_PUBLIC_API_URL="${{ inputs.api-url }}" \
        --build-arg NEXT_PUBLIC_APP_URL="${{ inputs.app-url }}" \
        -t ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }} \
        --platform=linux/amd64 \
        ./frontend

      # Push to Lightsail
      aws lightsail push-container-image \
        --service-name ${LIGHTSAIL_SERVICE_NAME} \
        --label ${CONTAINER_NAME} \
        --image ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }}

      # Clean up local Docker image to free space and remove sensitive data
      docker rmi ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }} || true

  - name: Deploy to Lightsail
    env:
      LIGHTSAIL_SERVICE_NAME: jaja-frontend
      CONTAINER_NAME: frontend
      CONTAINER_PORT: 3000
      PUBLIC_PORT: 80
      APP_URL: ${{ inputs.app-url }}
      API_URL: ${{ inputs.api-url }}
      GH_APP_ID: ${{ inputs.gh-app-id }}
      GH_PRIVATE_KEY: ${{ inputs.gh-private-key }}
      GH_INSTALLATION_ID: ${{ inputs.gh-installation-id }}
    shell: bash
    run: |
      # Debug environment variables (before masking)
      echo "API_URL is set to: ${API_URL}"
      echo "APP_URL is set to: ${APP_URL}"
      
      # Mask env vars before use
      echo "::add-mask::${APP_URL}"
      echo "::add-mask::${API_URL}"
      echo "::add-mask::${GH_APP_ID}"
      echo "::add-mask::${GH_PRIVATE_KEY}"
      echo "::add-mask::${GH_INSTALLATION_ID}"
      
      # Escape environment variables for JSON
      ESCAPED_GH_PRIVATE_KEY=$(printf '%s' "${GH_PRIVATE_KEY}" | sed 's/\\/\\\\/g; s/"/\\"/g; s/\t/\\t/g' | tr '\n' ' ' | sed 's/\r//g')
      echo "::add-mask::${ESCAPED_GH_PRIVATE_KEY}"
      
      # Deploy to Lightsail using inline JSON
      aws lightsail create-container-service-deployment \
        --region ${{ inputs.aws-region }} \
        --service-name ${LIGHTSAIL_SERVICE_NAME} \
        --output yaml \
        --containers "{
          \"${CONTAINER_NAME}\": {
            \"image\": \":${LIGHTSAIL_SERVICE_NAME}.${CONTAINER_NAME}.latest\",
            \"environment\": {
              \"NODE_ENV\": \"production\",
              \"NEXT_PUBLIC_APP_URL\": \"${APP_URL}\",
              \"NEXT_PUBLIC_API_URL\": \"${API_URL}\",
              \"APP_URL\": \"${APP_URL}\",
              \"GH_APP_ID\": \"${GH_APP_ID}\",
              \"GH_PRIVATE_KEY\": \"${ESCAPED_GH_PRIVATE_KEY}\",
              \"GH_INSTALLATION_ID\": \"${GH_INSTALLATION_ID}\"
            },
            \"ports\": {
              \"${CONTAINER_PORT}\": \"HTTP\"
            }
          }
        }" \
        --public-endpoint "{
          \"containerName\": \"${CONTAINER_NAME}\",
          \"containerPort\": ${CONTAINER_PORT},
          \"healthCheck\": {
            \"path\": \"/\",
            \"intervalSeconds\": 10,
            \"healthyThreshold\": 2,
            \"unhealthyThreshold\": 2,
            \"timeoutSeconds\": 5,
            \"successCodes\": \"200-499\"
          }
        }"

      # Clean up environment variables after deployment
      unset APP_URL API_URL GH_APP_ID GH_PRIVATE_KEY GH_INSTALLATION_ID ESCAPED_GH_PRIVATE_KEY

  - name: Cleanup sensitive files and data
    if: always()
    shell: bash
    run: |
      # Clear shell history
      history -c
      rm -f ~/.bash_history ~/.zsh_history 2>/dev/null || true
      
      # Clear environment variables that might contain secrets
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN || true
      unset GH_APP_ID GH_PRIVATE_KEY GH_INSTALLATION_ID || true
      unset APP_URL API_URL || true
      
      # Clear any temporary files that might contain secrets
      find /tmp -name "*credentials*" -delete 2>/dev/null || true
      find /tmp -name "*secret*" -delete 2>/dev/null || true
      find /tmp -name "*private*" -delete 2>/dev/null || true
      
      # Clear Docker build cache to remove any cached secrets
      docker builder prune -f || true
      
      # Clear any AWS CLI cache
      rm -rf ~/.aws/credentials ~/.aws/config 2>/dev/null || true
      
      echo "Cleanup completed successfully"

  - name: Verify cleanup
    if: always()
    shell: bash
    run: |
      # Verify environment variables are cleared
      if [ -n "${GH_APP_ID:-}" ]; then
        echo "::error::GH_APP_ID environment variable still set after cleanup"
        exit 1
      fi
      
      if [ -n "${GH_PRIVATE_KEY:-}" ]; then
        echo "::error::GH_PRIVATE_KEY environment variable still set after cleanup"
        exit 1
      fi
      
      if [ -n "${GH_INSTALLATION_ID:-}" ]; then
        echo "::error::GH_INSTALLATION_ID environment variable still set after cleanup"
        exit 1
      fi
      
      echo "Cleanup verification passed"