name: Deploy Frontend to AWS Lightsail
description: Deploy frontend application to AWS Lightsail

inputs:
  aws-access-key-id:
    description: AWS Access Key ID
    required: true
  aws-region:
    description: AWS Region
    required: true
  aws-secret-access-key:
    description: AWS Access Key Secret
    required: true
  app-url:
    description: Frontend application URL
    required: true
  api-url:
    description: Backend API URL
    required: true
  gh-app-id:
    description: GitHub App ID
    required: true
  gh-private-key:
    description: GitHub Private Key
    required: true
  gh-installation-id:
    description: GitHub Installation ID
    required: true

runs:
  using: composite
  steps:
  - name: Mask sensitive inputs
    shell: bash
    run: |
      echo "::add-mask::${{ inputs.aws-access-key-id }}"
      echo "::add-mask::${{ inputs.aws-secret-access-key }}"
      echo "::add-mask::${{ inputs.app-url }}"
      echo "::add-mask::${{ inputs.api-url }}"
      echo "::add-mask::${{ inputs.gh-app-id }}"
      echo "::add-mask::${{ inputs.gh-private-key }}"
      echo "::add-mask::${{ inputs.gh-installation-id }}"

  - name: Set up AWS CLI
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  - name: Install Lightsail plugin
    shell: bash
    run: |
      curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
      chmod +x /usr/local/bin/lightsailctl

  - name: Build and push Docker image
    env:
      LIGHTSAIL_SERVICE_NAME: jaja-frontend
      CONTAINER_NAME: frontend
    shell: bash
    run: |
      # Build Docker image
      docker build -t ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }} --platform=linux/amd64 ./frontend

      # Push to Lightsail
      aws lightsail push-container-image \
        --service-name ${LIGHTSAIL_SERVICE_NAME} \
        --label ${CONTAINER_NAME} \
        --image ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }}

  - name: Deploy to Lightsail
    env:
      LIGHTSAIL_SERVICE_NAME: jaja-frontend
      CONTAINER_NAME: frontend
      CONTAINER_PORT: 3000
      PUBLIC_PORT: 80
      APP_URL: ${{ inputs.app-url }}
      API_URL: ${{ inputs.api-url }}
      GH_APP_ID: ${{ inputs.gh-app-id }}
      GH_PRIVATE_KEY: ${{ inputs.gh-private-key }}
      GH_INSTALLATION_ID: ${{ inputs.gh-installation-id }}
    shell: bash
    run: |
      # Mask env vars before use
      echo "::add-mask::${APP_URL}"
      echo "::add-mask::${API_URL}"
      echo "::add-mask::${GH_APP_ID}"
      echo "::add-mask::${GH_PRIVATE_KEY}"
      echo "::add-mask::${GH_INSTALLATION_ID}"
      
      # Create JSON using jq to ensure proper escaping
      if command -v jq &> /dev/null; then
        # Use jq to create the entire JSON with proper escaping
        jq -n \
          --arg serviceName "${LIGHTSAIL_SERVICE_NAME}" \
          --arg containerName "${CONTAINER_NAME}" \
          --arg image ":${LIGHTSAIL_SERVICE_NAME}.${CONTAINER_NAME}.latest" \
          --arg containerPort "${CONTAINER_PORT}" \
          --arg apiUrl "${API_URL}" \
          --arg appUrl "${APP_URL}" \
          --arg ghAppId "${GH_APP_ID}" \
          --arg ghPrivateKey "${GH_PRIVATE_KEY}" \
          --arg ghInstallationId "${GH_INSTALLATION_ID}" \
          '{
            serviceName: $serviceName,
            containers: {
              ($containerName): {
                image: $image,
                environment: {
                  NODE_ENV: "production",
                  NEXT_PUBLIC_API_URL: $apiUrl,
                  APP_URL: $appUrl,
                  GH_APP_ID: $ghAppId,
                  GH_PRIVATE_KEY: $ghPrivateKey,
                  GH_INSTALLATION_ID: $ghInstallationId
                },
                ports: {
                  ($containerPort): "HTTP"
                }
              }
            },
            publicEndpoint: {
              containerName: $containerName,
              containerPort: ($containerPort | tonumber),
              healthCheck: {
                healthyThreshold: 2,
                unhealthyThreshold: 2,
                timeoutSeconds: 5,
                intervalSeconds: 10,
                path: "/",
                successCodes: "200-499"
              }
            }
          }' > lc.json
      else
        # Fallback: simple escaping for basic cases
        ESCAPED_API_URL=$(printf '%s' "${API_URL}" | sed 's/\\/\\\\/g; s/"/\\"/g')
        ESCAPED_APP_URL=$(printf '%s' "${APP_URL}" | sed 's/\\/\\\\/g; s/"/\\"/g')
        ESCAPED_GH_APP_ID=$(printf '%s' "${GH_APP_ID}" | sed 's/\\/\\\\/g; s/"/\\"/g')
        ESCAPED_GH_PRIVATE_KEY=$(printf '%s' "${GH_PRIVATE_KEY}" | sed 's/\\/\\\\/g; s/"/\\"/g')
        ESCAPED_GH_INSTALLATION_ID=$(printf '%s' "${GH_INSTALLATION_ID}" | sed 's/\\/\\\\/g; s/"/\\"/g')
        
                cat > lc.json << EOF
{
  "serviceName": "${LIGHTSAIL_SERVICE_NAME}",
  "containers": {
    "${CONTAINER_NAME}": {
      "image": ":${LIGHTSAIL_SERVICE_NAME}.${CONTAINER_NAME}.latest",
      "environment": {
        "NODE_ENV": "production",
        "NEXT_PUBLIC_API_URL": "${ESCAPED_API_URL}",
        "APP_URL": "${ESCAPED_APP_URL}",
        "GH_APP_ID": "${ESCAPED_GH_APP_ID}",
        "GH_PRIVATE_KEY": "${ESCAPED_GH_PRIVATE_KEY}",
        "GH_INSTALLATION_ID": "${ESCAPED_GH_INSTALLATION_ID}"
      },
      "ports": {
        "${CONTAINER_PORT}": "HTTP"
      }
    }
  },
  "publicEndpoint": {
    "containerName": "${CONTAINER_NAME}",
    "containerPort": ${CONTAINER_PORT},
    "healthCheck": {
      "healthyThreshold": 2,
      "unhealthyThreshold": 2,
      "timeoutSeconds": 5,
      "intervalSeconds": 10,
      "path": "/",
      "successCodes": "200-499"
    }
  }
}
EOF
            fi

            echo "::add-mask::${API_URL}"
            echo "::add-mask::${APP_URL}"
            echo "::add-mask::${GH_APP_ID}"
            echo "::add-mask::${GH_PRIVATE_KEY}"
            echo "::add-mask::${GH_INSTALLATION_ID}"
            echo "::add-mask::${ESCAPED_API_URL}"
            echo "::add-mask::${ESCAPED_APP_URL}"
            echo "::add-mask::${ESCAPED_GH_APP_ID}"
            echo "::add-mask::${ESCAPED_GH_PRIVATE_KEY}"
            echo "::add-mask::${ESCAPED_GH_INSTALLATION_ID}"
      
      # Debug: Validate JSON and show structure (without sensitive data)
      echo "Validating JSON..."
      if command -v jq &> /dev/null; then
        if jq empty lc.json; then
          echo "✅ JSON is valid"
          echo "JSON structure (without sensitive data):"
          jq 'del(.containers.frontend.environment.GH_PRIVATE_KEY)' lc.json
        else
          echo "❌ JSON is invalid"
          exit 1
        fi
      else
        echo "JSON validation check:"
        python3 -m json.tool lc.json > /dev/null && echo "✅ JSON is valid" || echo "❌ JSON is invalid"
      fi
      
      # Deploy to Lightsail
      aws lightsail create-container-service-deployment \
        --cli-input-json file://lc.json