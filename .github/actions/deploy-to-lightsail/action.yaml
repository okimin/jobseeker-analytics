name: Deploy to AWS Lightsail
description: Deploy application to a specific environment

inputs:
  aws-access-key-id:
    description: AWS Access Key ID
    required: true
  aws-region:
    description: AWS Region
    required: true
  aws-secret-access-key:
    description: AWS Access Key Secret
    required: true
  google-credentials-file-content:
    description: Google Credentials File Content
    required: true
  ls-database-name:
    description: Lightsail Database Name
    required: true
  redirect-uri:
    description: Login redirect URI associated with the Google App
    required: true
  cookie-secret:
    description: Cookie secret
    required: true

runs:
  using: composite

  steps:
  - name: Set up AWS CLI
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  - name: Install Lightsail plugin
    shell: bash
    run: |
      curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
      chmod +x /usr/local/bin/lightsailctl

  - name: Query database connection info from Lightsail
    id: get_db_info
    env:
      LS_DATABASE_NAME: ${{ inputs.ls-database-name }}
    shell: bash
    run: |
      # Query the master password from Lightsail database
      MASTER_PASSWORD=$(aws lightsail get-relational-database-master-user-password \
        --relational-database-name ${LS_DATABASE_NAME} \
        --password-version CURRENT \
        --query 'masterUserPassword' \
        --output text)

      # Query database details for connection info
      DB_INFO=$(aws lightsail get-relational-database \
        --relational-database-name ${LS_DATABASE_NAME})

      # Extract connection details
      MASTER_USERNAME=$(echo $DB_INFO | jq -r '.relationalDatabase.masterUsername')
      MASTER_DATABASE_NAME=$(echo $DB_INFO | jq -r '.relationalDatabase.masterDatabaseName')
      ENDPOINT_ADDRESS=$(echo $DB_INFO | jq -r '.relationalDatabase.masterEndpoint.address')
      ENDPOINT_PORT=$(echo $DB_INFO | jq -r '.relationalDatabase.masterEndpoint.port')

      # Set as outputs for use in subsequent steps
      echo "database_url=postgresql://${MASTER_USERNAME}:${MASTER_PASSWORD}@${ENDPOINT_ADDRESS}:${ENDPOINT_PORT}/${MASTER_DATABASE_NAME}" >> $GITHUB_OUTPUT

  - name: Stage Google credentials.json
    shell: bash
    run: |
      cat << 'EOF' > backend/credentials.json
      ${{ inputs.google-credentials-file-content }}
      EOF

  - name: Build and push Docker image
    env:
      LIGHTSAIL_SERVICE_NAME: just-a-job-app
      CONTAINER_NAME: backend
    shell: bash
    run: |
      # Build Docker image
      docker build -t ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }} --platform=linux/amd64 ./backend

      # Push to Lightsail
      aws lightsail push-container-image \
        --service-name ${LIGHTSAIL_SERVICE_NAME} \
        --label ${CONTAINER_NAME} \
        --image ${LIGHTSAIL_SERVICE_NAME}-${CONTAINER_NAME}:${{ github.sha }}

  - name: Deploy to Lightsail
    env:
      CONTAINER_PORT: 8000
      PUBLIC_PORT: 80
      DATABASE_URL: ${{ steps.get_db_info.outputs.database_url }}
      REDIRECT_URI: ${{ inputs.redirect-uri }}
      COOKIE_SECRET: ${{ inputs.cookie-secret }}
    shell: bash
    run: |

      # Create deployment JSON
      cat > lc.json << EOF
      {
        "serviceName": "${LIGHTSAIL_SERVICE_NAME}",
        "containers": {
          "${CONTAINER_NAME}": {
            "image": ":${LIGHTSAIL_SERVICE_NAME}.${CONTAINER_NAME}.latest",
            "environment": {
              "REDIRECT_URI": "${REDIRECT_URI}",
              "GOOGLE_API_KEY": "...",
              "COOKIE_SECRET": "${COOKIE_SECRET}",
              "APP_URL": "http://localhost:3000",
              "ENV": "staging",
              "DATABASE_URL": "${DATABASE_URL}"
            },
            "ports": {
              "${CONTAINER_PORT}": "HTTP"
            }
          }
        },
        "publicEndpoint": {
          "containerName": "${CONTAINER_NAME}",
          "containerPort": ${CONTAINER_PORT},
          "healthCheck": {
            "healthyThreshold": 2,
            "unhealthyThreshold": 2,
            "timeoutSeconds": 5,
            "intervalSeconds": 10,
            "path": "/",
            "successCodes": "200-499"
          }
        }
      }
      EOF

      # Deploy to Lightsail
      aws lightsail create-container-service-deployment \
        --cli-input-json file://lc.json
